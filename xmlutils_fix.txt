XMLDocument::XMLDocument(const string& fileName) : _doc(new rapidxml::xml_document<char>()), _buffer(NULL) {
    // Need to load the entire file into memory to pass to doc.parse().
	// TODO: Fixme
    //ifstream t(fileName.c_str());
    //QL_REQUIRE(t.is_open(), "Failed to open file " << fileName);
    //t.seekg(0, std::ios::end);                  // go to the end
    //Size length = static_cast<Size>(t.tellg()); // report location (this is the length)
    //QL_REQUIRE(length > 0, "File " << fileName << " is empty.");
    //t.seekg(0, std::ios::beg);      // go back to the beginning
    //_buffer = new char[length + 1]; // allocate memory for a buffer of appropriate dimension
    //memset(_buffer, 0, length + 1); // Wipe the buffer (caused problems on windows release build)
    //t.read(_buffer, length);        // read the whole file into the buffer
    //t.close();                      // close file handle
    //_buffer[length] = '\0';

	// Temp fix
	if (true)
	{
        std::ifstream file(fileName, std::ios::binary | std::ios::ate);
        std::streamsize length = file.tellg();
        file.seekg(0, std::ios::beg);

        _buffer = new char[length + 1];
        file.read(_buffer, length);
        _buffer[length] = '\0';
	}

    try {
        _doc->parse<0>(_buffer);
    } catch (rapidxml::parse_error& pe) {
        string where(pe.where<char>(), 30); // limit to first 30 chars.
        QL_FAIL("RapidXML Parse Error : " << pe.what() << ". where=" << where);
    }
}
